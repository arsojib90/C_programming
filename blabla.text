1.Newton 
    #include<stdio.h>
    #include<math.h>
    float f(float x)
    {
        return x*log10(x) - 1.2;
    }
    float df (float x)
    {
        return log10(x) + 0.43429;
    }
    void main()
    {
        int itr, maxmitr;
        float h, x0, x1, allerr;
        printf("\nEnter x0, allowed error and maximum iterations\n");
        scanf("%f %f %d", &x0, &allerr, &maxmitr);
        for (itr=1; itr<=maxmitr; itr++)
        {
            h=f(x0)/df(x0);
            x1=x0-h;
            printf(" At Iteration no. %3d, x = %9.6f\n", itr, x1);
            if (fabs(h) < allerr)
            {
                printf("After %3d iterations, root = %8.6f\n", itr, x1);
                return 0;
            }
            x0=x1;
        }
        printf(" The required solution does not converge or iterations are insufficient\n");
        return 1;
    }


2.Euler

        #include<stdio.h>
        float fun(float x,float y)
        {
            float f;
            f=x+y;
            return f;
        }
        main()
        {
            float a,b,x,y,h,t,k;
            printf("\nEnter x0,y0,h,xn: ");
            scanf("%f%f%f%f",&a,&b,&h,&t);
            x=a;
            y=b;
            printf("\n  x\t  y\n");
            while(x<=t)
            {
                k=h*fun(x,y);
                y=y+k;
                x=x+h;
                printf("%0.3f\t%0.3f\n",x,y);
            }
        }


3.Range-kutta

        #include<stdio.h>
        #include<math.h>
        float f(float x,float y);
        int main()
        {
            float x0,y0,m1,m2,m3,m4,m,y,x,h,xn;
            printf("Enter x0,y0,xn,h:");
            scanf("%f %f %f %f",&x0,&y0,&xn,&h);
            x=x0;
            y=y0;
            printf("\n\nX\t\tY\n");
            while(x<xn)
            {
                m1=f(x0,y0);
                m2=f((x0+h/2.0),(y0+m1*h/2.0));
                m3=f((x0+h/2.0),(y0+m2*h/2.0));
                m4=f((x0+h),(y0+m3*h));
                m=((m1+2*m2+2*m3+m4)/6);
                y=y+m*h;
                x=x+h;
                printf("%f\t%f\n",x,y);
            }
        }
        float f(float x,float y)
        {
            float m;
            m=(x-y)/(x+y);
            return m;
        }


4.Gauss-Seidal 

    #include<stdio.h>
    #include<math.h>
    #define X 2
    main()
    {
        float x[X][X+1],a[X], ae, max,t,s,e;
        int i,j,r,mxit;
        for(i=0;i<X;i++) a[i]=0;
        puts(" Eneter the elemrnts of augmented matrix rowwise\n");
        for(i=0;i<X;i++)
        {
        for(j=0;j<X+1;j++)
        {
        scanf("%f",&x[i][j]);
        }
        }
        printf(" Eneter the allowed error and maximum number of iteration: ");
        scanf("%f%d",&ae,&mxit);
        printf("Iteration\tx[1]\tx[2]\n");
        for(r=1;r<=mxit;r++)
        {
            max=0;
            for(i=0;i<X;i++)
            {
                s=0;
                for(j=0;j<X;j++)
                if(j!=i) s+=x[i][j]*a[j];
                t=(x[i][X]-s)/x[i][i];
                e=fabs(a[i]-t);
                a[i]=t;
            }
            printf(" %5d\t",r);
            for(i=0;i<X;i++)
            printf(" %9.4f\t",a[i]);
            printf("\n");
            if(max<ae)
            {
                printf(" Converses in %3d iteration\n", r);
                for(i=0;i<X;i++)
                printf("a[%3d]=%7.4f\n", i+1,a[i]);
                return 0;
            }

            }
        }

5.Bisection 

        #include<stdio.h>
        #include<math.h>
        float fun (float x)
        {
            return (x*x*x - 4*x - 9);
        }
        void bisection (float *x, float a, float b, int *itr)
        /* this function performs and prints the result of one iteration */
        {
            *x=(a+b)/2;
            ++(*itr);
            printf("Iteration no. %3d X = %7.5f\n", *itr, *x);
        }
        void main ()
        {
            int itr = 0, maxmitr;
            float x, a, b, allerr, x1;
            printf("\nEnter the values of a, b, allowed error and maximum iterations:\n");
            scanf("%f %f %f %d", &a, &b, &allerr, &maxmitr);
            bisection (&x, a, b, &itr);
            do
            {
                if (fun(a)*fun(x) < 0)
                    b=x;
                else
                    a=x;
                bisection (&x1, a, b, &itr);
                if (fabs(x1-x) < allerr)
                {
                    printf("After %d iterations, root = %6.4f\n", itr, x1);
                    return 0;
                }
                x=x1;
            }
            while (itr < maxmitr);
            printf("The solution does not converge or iterations are not sufficient");
            return 1;
        }

6.Trapezoidal 

        #include<stdio.h>
        #include<conio.h>
        #include<math.h>
        float f(float x)
        {
            return(1/(1+pow(x,2)));
        }
        void main()
        {
            int i,n;
            float x0,xn,h,y[20],so,se,ans,x[20];
            printf("\n Enter values of x0,xn,h:\n");
            scanf("%f%f%f",&x0,&xn,&h);
            n=(xn-x0)/h;
            if(n%2==1)
            {
                n=n+1;
            }
            h=(xn-x0)/n;
            printf("\nrefined value of n and h are:%d  %f\n",n,h);
            printf("\n Y values \n");
            for(i=0; i<=n; i++)
            {
                x[i]=x0+i*h;
                y[i]=f(x[i]);
                printf("\n%f\n",y[i]);
            }
            so=0;
            se=0;
            for(i=1; i<n; i++)
            {
                if(i%2==1)
                {
                    so=so+y[i];
                }
                else
                {
                    se=se+y[i];
                }
            }
            ans=h/3*(y[0]+y[n]+4*so+2*se);
            printf("\nfinal integration is %f",ans);
            getch();
        }